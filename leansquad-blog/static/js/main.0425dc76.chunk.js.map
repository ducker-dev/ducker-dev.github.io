{"version":3,"sources":["App/Components/PageHeader/index.js","App/Components/fetchs.js","App/Components/Post/index.js","App/Components/CreatePost/index.js","App/Pages/Posts/index.js","Redux/actions.js","App/Components/Comments/index.js","App/Pages/ViewPost/index.js","App/index.js","Redux/reducers.js","index.js"],"names":["PageHeader","className","to","dataInteraction","method","body","url","resultFunc","errorFunc","options","headers","JSON","stringify","fetch","then","response","json","text","result","catch","error","Post","this","props","id","title","getPosts","onClick","console","log","Component","CreatePost","handleSubmit","e","preventDefault","postTitle","textInputOne","current","value","postBody","textInputTwo","setState","openEditing","React","createRef","state","inputValueOne","inputValueTwo","onSubmit","required","type","placeholder","ref","Posts","posts","length","map","post","key","mapDispatchToProps","payload","connect","store","Comments","textInput","getPost","comments","comment","ViewPost","match","params","res","App","exact","path","component","initialState","changeState","action","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0425dc76.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nimport \"./style.scss\";\n\nfunction PageHeader() {\n  return (\n    <header className=\"header\">\n      <div className=\"container header__content\">\n        <nav>\n          <ul>\n            <li><Link to=\"/\">Перейти ко всем постам</Link></li>\n          </ul>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default PageHeader;\n","const basePath = \"https://simpleblogapi.herokuapp.com\";\n\nexport const dataInteraction = (method, body, url, resultFunc, errorFunc ) => {\n  const options = {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    },\n    body: body ? JSON.stringify(body) : null\n  };\n  fetch(`${basePath}/${url}`, options)\n    .then(\n      method === \"GET\"\n        ? response => {\n          return response.json();\n        }\n        : response => response.text()\n    )\n    .then(result => resultFunc(result))\n    .catch(error => errorFunc(error));\n};","import React, {Component} from 'react';\nimport \"./style.scss\";\nimport {Link} from \"react-router-dom\";\nimport {dataInteraction} from \"../fetchs\";\n\nclass Post extends Component {\n  render() {\n    const {id, title, body, getPosts} = this.props;\n\n    return (\n      <div className=\"post\">\n        <div className=\"post__del-post\"\n             onClick={() => {\n               dataInteraction(\n                 \"DELETE\",\n                 null,\n                 `posts/${id}`,\n                 () => {\n                   dataInteraction(\n                     \"GET\",\n                     null,\n                     \"posts\",\n                     (result) => getPosts(result),\n                     (error) => console.log(error)\n                   );\n                 },\n                 (error) => console.log(error)\n               );\n             }}\n        >\n          x\n        </div>\n        <Link to={\"/view-post/\" + id} className=\"post__link\">\n          <div className=\"post__title\">\n            {title || 'Вы не передали заголовок поста'}\n          </div>\n          <div className=\"post__body\">\n            {body || 'Вы не передали тело поста'}\n          </div>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React, {Component} from 'react';\nimport \"./style.scss\";\nimport {dataInteraction} from \"../fetchs\";\n\nclass CreatePost extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.textInputOne = React.createRef();\n    this.textInputTwo = React.createRef();\n    this.state = {\n      openEditing: false,\n      inputValueOne: '',\n      inputValueTwo: ''\n    }\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    let postTitle = this.textInputOne.current.value;\n    let postBody = this.textInputTwo.current.value;\n\n    dataInteraction(\n      \"POST\",\n      {\n        \"title\": postTitle,\n        \"body\": postBody\n      },\n      \"posts\",\n      () => {\n        dataInteraction(\n          \"GET\",\n          null,\n          \"posts\",\n          (result) => this.props.getPosts(result),\n          (error) => console.log(error)\n        );\n        postTitle = '';\n        postBody = '';\n        this.setState({openEditing: false});\n      },\n    );\n  };\n\n\n  render() {\n    const {openEditing} = this.state;\n\n    return (\n      <div className=\"create-post\" onClick={() => this.setState({openEditing: true})}>\n        {\n          openEditing\n            ? <form className=\"create-post__form\" onSubmit={this.handleSubmit}>\n              <input className=\"create-post__input\"\n                     required\n                     type=\"text\"\n                     placeholder=\"Заголовок поста\"\n                     ref={this.textInputOne}/>\n              <input className=\"create-post__input\"\n                     required\n                     type=\"text\"\n                     placeholder=\"Тело поста\"\n                     ref={this.textInputTwo}/>\n              <button className=\"create-post__button\">\n                Создать пост\n              </button>\n            </form>\n            : <div className=\"create-post__plus\">\n              Создать новый пост\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default CreatePost;\n","import React, {Component} from 'react';\n\nimport \"./style.scss\";\nimport PageHeader from \"../../Components/PageHeader\";\nimport Post from \"../../Components/Post\";\nimport CreatePost from \"../../Components/CreatePost\";\n\nimport {connect} from \"react-redux\";\nimport {getPosts} from \"../../../Redux/actions\";\nimport {dataInteraction} from \"../../Components/fetchs\"\n\nclass Posts extends Component {\n  componentDidMount() {\n    dataInteraction(\n      \"GET\",\n      null,\n      \"posts\",\n      (result) => this.props.getPosts(result),\n      (error) => console.log(error)\n    );\n  }\n\n  render() {\n    const {posts, getPosts} = this.props;\n    return (\n      <>\n        <PageHeader/>\n        <div className=\"posts\">\n          <div className=\"container\">\n            <h1>Posts</h1>\n            <div className=\"posts__content\">\n              {\n                posts.length === 0\n                  ? <div>Загрузка...</div>\n                  : posts.map(post => <Post key={post.id} {...post}\n                                            getPosts={getPosts}/>)\n              }\n              <CreatePost getPosts={getPosts} />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  posts: store.posts,\n});\n\nconst mapDispatchToProps = {\n  getPosts\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n","export const getPosts = posts => ({\n  type: \"GET_POSTS\",\n  payload: posts\n});\n\nexport const getPost = post => ({\n  type: \"GET_POST\",\n  payload: post\n});","import React, {Component} from 'react';\nimport \"./style.scss\";\nimport {dataInteraction} from \"../fetchs\";\n\nclass Comments extends Component {\n  constructor(props) {\n    super(props);\n\n    this.textInput = React.createRef();\n    this.state = {\n      value: ''\n    }\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    dataInteraction(\n      \"POST\",\n      {\n        \"postId\": this.props.id,\n        \"body\": this.textInput.current.value\n      },\n      \"comments\",\n      () => {\n        dataInteraction(\n          \"GET\",\n          null,\n          `posts/${this.props.id}?_embed=comments`,\n          (result) => this.props.getPost(result),\n          (error) => console.log(error)\n        );\n        this.textInput.current.value = '';\n      },\n    );\n  };\n\n  render() {\n    const {comments} = this.props;\n\n    return (\n      <div className=\"comments\">\n        {\n          comments && comments.length > 0\n            ? comments.map(comment => (\n              <div key={comment.id} className=\"comments__comment\">{comment.body}</div>\n            ))\n            : <div className=\"comments__temporary-text\">{\n              comments\n                ? \"Данный пост еще никто не комментрировал\"\n                : \"Загрузка комментариев\"\n            }</div>\n        }\n        <form className=\"comments__form\" onSubmit={this.handleSubmit}>\n          <input className=\"comments__input\"\n                 required\n                 type=\"text\"\n                 placeholder=\"Введите текст комментария\"\n                 ref={this.textInput}/>\n          <button className=\"comments__button\">Отправить</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Comments;\n","import React, {Component} from 'react';\nimport PageHeader from \"../../Components/PageHeader\";\nimport \"./style.scss\";\n\nimport {connect} from \"react-redux\";\nimport {getPost} from \"../../../Redux/actions\"\nimport Comments from \"../../Components/Comments\";\n\nclass ViewPost extends Component {\n  componentDidMount() {\n    const id = this.props.match.params.id || \"\";\n\n    fetch(`https://simpleblogapi.herokuapp.com/posts/${id}?_embed=comments`)\n      .then(res => {\n        return res.json();\n      })\n      .then(result => this.props.getPost(result));\n  }\n\n  componentWillUnmount() {\n    this.props.getPost({})\n  }\n\n  render() {\n    const {post, getPost} = this.props;\n    return (\n      <>\n        <PageHeader/>\n        <div className=\"view-post\">\n          <div className=\"container\">\n            <h1>View post</h1>\n            {\n              !post.title && !post.body\n                ? <div>Загрузка информации о посте...</div>\n                : <div className=\"view-post__content\">\n                  <div className=\"view-post__title\">{post.title}</div>\n                  <div>{post.body}</div>\n                </div>\n            }\n            <h1>Comments</h1>\n            <Comments {...post} getPost={getPost}/>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  post: store.post,\n});\n\nconst mapDispatchToProps = {\n  getPost\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewPost);\n","import React from 'react';\nimport './style.scss';\nimport {Switch, Route} from \"react-router-dom\";\n\nimport Posts from \"./Pages/Posts\"\nimport ViewPost from \"./Pages/ViewPost\"\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Posts} />\n      <Route path=\"/view-post/:id\" component={ViewPost} />\n    </Switch>\n\n  );\n}\n\nexport default App;\n","const initialState = {\n  posts: [],\n  post: {}\n};\n\nconst changeState = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_POSTS\":\n      return {\n        ...state,\n        posts: action.payload\n      };\n    case \"GET_POST\":\n      return {\n        ...state,\n        post: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\nexport default changeState;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport changeState from \"./Redux/reducers\";\n\nconst store = createStore(changeState);\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// import * as serviceWorker from './serviceWorker';\n// serviceWorker.unregister();\n"],"sourceRoot":""}